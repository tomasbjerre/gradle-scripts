buildscript {
  repositories {
    maven { url "https://plugins.gradle.org/m2/" }
  }
  dependencies {
    classpath 'gradle.plugin.com.github.sherter.google-java-format:google-java-format-gradle-plugin:0.+'
    classpath 'se.bjurr.violations:violations-gradle-plugin:1.+'
    classpath 'gradle.plugin.com.github.ksoichiro:gradle-build-info-plugin:0.+'
    classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:2.0.0"
  }
}

apply plugin: com.github.sherter.googlejavaformatgradleplugin.GoogleJavaFormatPlugin
apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: com.github.spotbugs.SpotBugsPlugin
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: se.bjurr.violations.gradle.plugin.ViolationsGradlePlugin
apply plugin: com.github.ksoichiro.build.info.BuildInfoPlugin

ext.projectDisplayName = (project.name.substring(0, 1).toUpperCase()+project.name.substring(1)).replaceAll('-',' ')

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
 mavenLocal()
 jcenter()
 mavenCentral()
 maven { url 'https://jitpack.io' }
}

test {
 if (System.getProperty('DEBUG', 'false') == 'true') {
  jvmArgs '-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=9009'
 }
}

if (JavaVersion.current().isJava8Compatible()) {
 allprojects {
  tasks.withType(Javadoc) {
   options.addStringOption('Xdoclint:none', '-quiet')
  }
 }
}

eclipse {
 classpath {
  downloadSources = true
  downloadJavadoc = true
 }
}

sourceSets {
 main.java.srcDirs = ['src/main/java' ]
 test.java.srcDirs = ['src/test/java' ]
}

if (JavaVersion.current().isJava8Compatible()) {
 allprojects {
  tasks.withType(Javadoc) {
   options.addStringOption('Xdoclint:none', '-quiet')
  }
 }
}

build.dependsOn 'verifyGoogleJavaFormat'

spotbugs {
 ignoreFailures = true
 effort = "max"
 showProgress = true
 reportLevel = "low"
 sourceSets = [sourceSets.main]
 excludeFilterConfig = resources.text.fromString(project.buildscript.classLoader.getResource('spotbugs-exclude.xml').getText())
}

task violations(type: se.bjurr.violations.gradle.plugin.ViolationsTask) {
 minSeverity = 'INFO'
 detailLevel = 'VERBOSE' // PER_FILE_COMPACT, COMPACT or VERBOSE
 maxViolations = 9999
 printViolations = true // Will print violations found in diff

 // Many more formats available, see: https://github.com/tomasbjerre/violations-lib
 violations = [
  ["FINDBUGS", ".", ".*/build/reports/findbugs/.*\\.xml\$","Findbugs"],
  ["FINDBUGS", ".", ".*/build/reports/spotbugs/.*\\.xml\$","Spotbugs"],
  ["GOOGLEERRORPRONE", ".", ".*/build/googleErrorProne.*\\.log\$","Error Prone"]
 ]
}

check.finalizedBy violations
